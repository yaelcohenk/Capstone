# -*- coding: utf-8 -*-
"""Clientes fieles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EzuBSub4U9FvAH4ztX5c5I05y_KcpvKf

### Antes
"""

import pandas as pd
from itertools import combinations
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np

df_clientes = pd.read_csv("/content/data_sales.csv", delimiter = ";")

df_clientes.columns

fecha_mas_reciente = df_clientes['date'].max()
print(fecha_mas_reciente)

"""### Funciones"""

def clientes_fieles(df_clientes, anio):

    df_anio = df_clientes[df_clientes['date'].dt.year == anio]

    if anio == 2024:
        fecha_mas_reciente = df_anio['date'].max()
        mes_anterior = fecha_mas_reciente.month - 1
        df_anio = df_anio[df_anio['date'].dt.month <= mes_anterior]
        compras_por_cliente_mes = df_anio.groupby(['client_id', df_anio['date'].dt.month]).size().reset_index(name='compras')
        meses_por_cliente = compras_por_cliente_mes.groupby('client_id').size()
        clientes_fieles = meses_por_cliente[meses_por_cliente == 2].index.tolist()
    else:
        compras_por_cliente_mes = df_anio.groupby(['client_id', df_anio['date'].dt.month]).size().reset_index(name='compras')
        meses_por_cliente = compras_por_cliente_mes.groupby('client_id').size()
        clientes_fieles = meses_por_cliente[meses_por_cliente == 12].index.tolist()

    return clientes_fieles

def promedio_compras_por_mes_por_cliente_fiel(df_clientes, anio):

    df_anio = df_clientes[df_clientes['date'].dt.year == anio]

    if anio == 2024:
        fecha_mas_reciente = df_anio['date'].max()
        mes_anterior = fecha_mas_reciente.month - 1
        df_anio = df_anio[df_anio['date'].dt.month <= mes_anterior]

    clientes_fieles_anio = clientes_fieles(df_anio, anio)
    df_clientes_fieles_anio = df_anio[df_anio['client_id'].isin(clientes_fieles_anio)]
    compras_por_cliente_mes = df_clientes_fieles_anio.groupby(['client_id', df_clientes_fieles_anio['date'].dt.month]).size().reset_index(name='compras')
    promedio_compras_por_mes_por_cliente = compras_por_cliente_mes.groupby('client_id')['compras'].mean()

    return promedio_compras_por_mes_por_cliente

def compras_por_mes(df_clientes, anio):

    df_anio = df_clientes[df_clientes['date'].dt.year == anio]

    if anio == 2024:
        fecha_mas_reciente = df_anio['date'].max()
        mes_anterior = fecha_mas_reciente.month - 1
        df_anio = df_anio[df_anio['date'].dt.month <= mes_anterior]

    clientes_fieles_anio = clientes_fieles(df_anio, anio)
    df_clientes_fieles_anio = df_anio[df_anio['client_id'].isin(clientes_fieles_anio)]
    compras_clientes_fieles_por_mes = df_clientes_fieles_anio.groupby(df_clientes_fieles_anio['date'].dt.month)['quantity'].mean()

    return compras_clientes_fieles_por_mes

def ganancias_por_mes(df_clientes, anio):

    df_anio = df_clientes[df_clientes['date'].dt.year == anio]

    if anio == 2024:
        fecha_mas_reciente = df_anio['date'].max()
        mes_anterior = fecha_mas_reciente.month - 1
        df_anio = df_anio[df_anio['date'].dt.month <= mes_anterior]

    ganancias_totales_por_mes = df_anio.groupby(df_anio['date'].dt.month)['total (CLP)'].sum()
    clientes_fieles_anio = clientes_fieles(df_anio, anio)
    df_clientes_fieles_anio = df_anio[df_anio['client_id'].isin(clientes_fieles_anio)]
    ganancias_clientes_fieles_por_mes = df_clientes_fieles_anio.groupby(df_clientes_fieles_anio['date'].dt.month)['total (CLP)'].sum()
    porcentaje_contribucion_clientes_fieles_por_mes = (ganancias_clientes_fieles_por_mes / ganancias_totales_por_mes) * 100

    return porcentaje_contribucion_clientes_fieles_por_mes

def productos_comprados_por_clientes_fieles(df_clientes, anio):

    df_anio = df_clientes[df_clientes['date'].dt.year == anio]
    clientes_fieles_anio = clientes_fieles(df_anio, anio)
    df_clientes_fieles_anio = df_anio[df_anio['client_id'].isin(clientes_fieles_anio)]
    productos_comprados = df_clientes_fieles_anio.groupby('item_id')['quantity'].sum().reset_index()
    productos_comprados = productos_comprados.sort_values(by='quantity', ascending=False)

    return productos_comprados

"""### Clientes fieles por año"""

df_clientes['date'] = pd.to_datetime(df_clientes['date'])
anios_unicos = sorted(df_clientes['date'].dt.year.unique())
clientes_fieles_por_anio = []

for anio in range(2020, 2024):
    clientes_fieles_anio = clientes_fieles(df_clientes, anio)
    clientes_fieles_por_anio.append((anio, set(clientes_fieles_anio)))

for anio, clientes_fieles_anio in clientes_fieles_por_anio:
    print(f"Clientes fieles del año {anio}: {clientes_fieles_anio}")

anios = [anio for anio, _ in clientes_fieles_por_anio]
cantidad_clientes_fieles = [len(clientes_fieles_anio) for _, clientes_fieles_anio in clientes_fieles_por_anio]

plt.figure(figsize=(15, 6))
plt.bar(anios, cantidad_clientes_fieles, color='skyblue')
plt.xlabel('Año')
plt.ylabel('Cantidad de clientes fieles')
plt.title('Cantidad de clientes fieles por año')
plt.xticks(anios)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

print(cantidad_clientes_fieles)

clientes_repetidos = {}

for comb in combinations(clientes_fieles_por_anio, 2):
    clientes_anios = [set(clientes) for _, clientes in comb]
    clientes_repetidos_comb = set.intersection(*clientes_anios)

    if clientes_repetidos_comb:
        anos_repetidos = [anio for anio, _ in comb]

        if len(anos_repetidos) == 2:
            clientes_repetidos[tuple(sorted(anos_repetidos))] = clientes_repetidos_comb

for comb in combinations(clientes_fieles_por_anio, 3):
    clientes_anios = [set(clientes) for _, clientes in comb]
    clientes_repetidos_comb = set.intersection(*clientes_anios)

    if clientes_repetidos_comb:
        anos_repetidos = [anio for anio, _ in comb]
        clientes_repetidos[tuple(sorted(anos_repetidos))] = clientes_repetidos_comb

for anos, clientes in clientes_repetidos.items():
    print(f"Clientes que se repiten en los años {' y en los años '.join(map(str, anos))} son:")
    print(', '.join(map(str, clientes)))

"""### Compras por clientes fieles"""

promedio_compras_por_mes_por_cliente_fiel_por_anio = {}

for anio in range(2020, 2024):
    promedio_compras_por_mes_por_cliente_fiel_por_anio[anio] = promedio_compras_por_mes_por_cliente_fiel(df_clientes, anio)

for anio, promedio_compras_por_mes_por_cliente_fiel_anio in promedio_compras_por_mes_por_cliente_fiel_por_anio.items():
    print(f"Promedio de compras por mes por cliente fiel en el año {anio}:")
    print(promedio_compras_por_mes_por_cliente_fiel_anio)

promedio_general_por_anio = []

for anio, promedio_compras_por_mes_por_cliente_fiel_anio in promedio_compras_por_mes_por_cliente_fiel_por_anio.items():
    promedio_anual = promedio_compras_por_mes_por_cliente_fiel_anio.mean()
    promedio_general_por_anio.append(promedio_anual)
    clientes = list(promedio_compras_por_mes_por_cliente_fiel_anio.index)
    promedios = list(promedio_compras_por_mes_por_cliente_fiel_anio.values)
    plt.figure(figsize=(15, 6))
    plt.scatter(clientes, promedios, color='skyblue')
    plt.axhline(y=promedio_anual, color='red', linestyle='--', label=f'Promedio anual: {promedio_anual:.2f}')
    plt.xlabel('Cliente')
    plt.ylabel('Promedio de compras por mes')
    plt.title(f'Promedio general de compras por mes por cliente fiel en el año {anio}')
    plt.legend()
    plt.grid(True)
    plt.show()

plt.figure(figsize=(15, 6))
plt.plot(range(2020, 2024), promedio_general_por_anio, marker='o', color='blue', linestyle='-')
plt.xlabel('Año')
plt.ylabel('Promedio general de compras por mes por cliente fiel')
plt.title('Promedios generales de compras por mes por cliente fiel para cada año')
plt.grid(True)
plt.xticks(range(2020, 2024))
plt.show()

print(promedio_general_por_anio)

compras_clientes_fieles_por_mes_por_anio = {}

for anio in range(2020, 2024):
    compras_clientes_fieles_por_mes_por_anio[anio] = compras_por_mes(df_clientes, anio)

for anio, compras_clientes_fieles_por_mes in compras_clientes_fieles_por_mes_por_anio.items():
    print(f"Cantidades promedio de compras por mes para todos los clientes fieles del año {anio}:")
    print(compras_clientes_fieles_por_mes)

# Graficar los datos
total_compras = []
promedio_total = []
for anio, compras_clientes_fieles_meses in compras_clientes_fieles_por_mes_por_anio.items():
    meses = list(range(1, 13))  # Asumiendo que los meses van de 1 a 12
    compras = compras_clientes_fieles_meses  # Suponiendo que las compras son un numpy array
    total_compras.append(compras)
    promedio_total.append(compras.mean())
    plt.plot(meses, compras, label=f'Año {anio}')

plt.xlabel('Mes')
plt.ylabel('Promedio de compras')
plt.title('Cantidad promedio de compras por mes para todos los clientes fieles para cada año')
plt.legend(loc='upper right')  # Coloca la leyenda en la esquina superior derecha
plt.grid(True)

# Ajusta los límites del eje y para que lleguen hasta 1.5
plt.ylim(1, 1.5)

plt.show()

print(total_compras)

print(promedio_total)

"""### Ganancias por clientes fieles"""

porcentaje_contribucion_clientes_fieles_por_mes_por_anio = {}

for anio in range(2020, 2024):
    porcentaje_contribucion_clientes_fieles_por_mes_por_anio[anio] = ganancias_por_mes(df_clientes, anio)

for anio, porcentaje_contribucion_clientes_fieles_por_mes in porcentaje_contribucion_clientes_fieles_por_mes_por_anio.items():
    print(f"Porcentaje de contribución de los clientes fieles por mes para el año {anio}:")
    print(porcentaje_contribucion_clientes_fieles_por_mes)

promedio_general_por_anio = []

for anio, porcentaje_contribucion_clientes_fieles_por_mes in porcentaje_contribucion_clientes_fieles_por_mes_por_anio.items():
    promedio_anual = porcentaje_contribucion_clientes_fieles_por_mes.mean()
    promedio_general_por_anio.append(promedio_anual)
    meses = list(porcentaje_contribucion_clientes_fieles_por_mes.index)
    porcentajes = list(porcentaje_contribucion_clientes_fieles_por_mes.values)
    plt.figure(figsize=(15, 6))
    plt.scatter(meses, porcentajes, color='skyblue')
    plt.axhline(y=promedio_anual, color='red', linestyle='--', label=f'Promedio anual: {promedio_anual:.2f}%')
    plt.xlabel('Mes')
    plt.ylabel('Porcentaje de contribución de los clientes fieles (%)')
    plt.title(f'Porcentaje de contribución de los clientes fieles por mes en el año {anio}')
    plt.legend()
    plt.grid(True)
    plt.show()

anios = list(porcentaje_contribucion_clientes_fieles_por_mes_por_anio.keys())
promedio_general_por_anio = [np.mean(porcentajes) for porcentajes in porcentaje_contribucion_clientes_fieles_por_mes_por_anio.values()]
meses = np.tile(np.arange(1, 13), len(anios))
plt.figure(figsize=(15, 6))
plt.plot(anios, promedio_general_por_anio, marker='o', color='blue', linestyle='-')
plt.xlabel('Año')
plt.ylabel('Promedio general de ganancias por mes por cliente fiel (%)')
plt.title('Promedio general de ganancias por mes por cliente fiel por año')
plt.grid(True)
plt.show()

promedio_general_por_anio

"""### Productos"""

resultados_por_anio = {}

for anio in range(2020, 2024):
    productos_por_anio = productos_comprados_por_clientes_fieles(df_clientes, anio)
    resultados_por_anio[anio] = productos_por_anio

for anio, productos in resultados_por_anio.items():
    print(f"Productos comprados por clientes fieles en {anio}:")
    print(productos)

for anio, productos in resultados_por_anio.items():
    plt.figure(figsize=(15, 6))
    plt.bar(productos['item_id'], productos['quantity'])
    plt.xlabel('ID del Producto')
    plt.ylabel('Cantidad Comprada por Clientes Fieles')
    plt.title(f'Productos Comprados por Clientes Fieles en el Año {anio}')
    plt.xticks(rotation=90)
    plt.grid(True)
    plt.show()

# Crear un diccionario para almacenar la suma de la cantidad por item_id
suma_cantidad_por_item_id = {}

# Iterar sobre cada año en resultados_por_anio
for anio, productos in resultados_por_anio.items():
    # Excluir el año 2024
    if anio != 2024:
        # Iterar sobre cada fila (producto) en el DataFrame de productos
        for _, producto in productos.iterrows():
            # Obtener el item_id y la cantidad comprada
            item_id = producto['item_id']
            cantidad = producto['quantity']
            # Sumar la cantidad al total acumulado para el item_id actual
            suma_cantidad_por_item_id[item_id] = suma_cantidad_por_item_id.get(item_id, 0) + cantidad

# Ordenar el diccionario por valor (cantidad total) en orden decreciente
suma_cantidad_por_item_id_ordenado = dict(sorted(suma_cantidad_por_item_id.items(), key=lambda item: item[1], reverse=True))

# Imprimir la suma de la cantidad por item_id ordenada por cantidad total en orden decreciente
for item_id, cantidad in suma_cantidad_por_item_id_ordenado.items():
    print(f"Item ID: {item_id}, Cantidad Total: {cantidad}")

# Crear un diccionario para almacenar la cantidad de veces que se compró cada producto por año
conteo_compras_por_item_id = {}

# Iterar sobre cada año en resultados_por_anio
for anio, productos in resultados_por_anio.items():
    # Excluir el año 2024
    if anio != 2024:
        # Iterar sobre cada fila (producto) en el DataFrame de productos
        for _, producto in productos.iterrows():
            # Obtener el item_id
            item_id = producto['item_id']
            # Incrementar el contador de compras para el item_id actual
            conteo_compras_por_item_id[item_id] = conteo_compras_por_item_id.get(item_id, 0) + 1

# Filtrar los productos que se compraron más de una vez en cada año
productos_frecuentes_por_anio = {item_id: cantidad for item_id, cantidad in conteo_compras_por_item_id.items() if cantidad > 1}

# Crear un diccionario para almacenar la suma de la cantidad por item_id
suma_cantidad_por_item_id = {}

# Iterar sobre cada año en resultados_por_anio
for anio, productos in resultados_por_anio.items():
    # Excluir el año 2024
    if anio != 2024:
        # Iterar sobre cada fila (producto) en el DataFrame de productos
        for _, producto in productos.iterrows():
            # Obtener el item_id y la cantidad comprada
            item_id = producto['item_id']
            cantidad = producto['quantity']
            # Verificar si el item_id es frecuente (se compró más de una vez en el año)
            if item_id in productos_frecuentes_por_anio:
                # Sumar la cantidad al total acumulado para el item_id actual
                suma_cantidad_por_item_id[item_id] = suma_cantidad_por_item_id.get(item_id, 0) + cantidad

# Ordenar el diccionario por valor (cantidad total) en orden decreciente
suma_cantidad_por_item_id_ordenado = dict(sorted(suma_cantidad_por_item_id.items(), key=lambda item: item[1], reverse=True))

# Imprimir la suma de la cantidad por item_id ordenada por cantidad total en orden decreciente
for item_id, cantidad in suma_cantidad_por_item_id_ordenado.items():
    print(f"Item ID: {item_id}, Cantidad Total: {cantidad}")

print(len(suma_cantidad_por_item_id_ordenado))